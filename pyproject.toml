[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vroot"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Xiangyang Ju", email = "xju@lbl.gov" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
    "hydra-core",
    "hydra-colorlog",
    "hydra-optuna-sweeper",
    "numpy",
    "rich",
    "ruff",
]

[project.scripts]
run_vroot = "vroot.run_vroot:main"

[project.urls]
Documentation = "https://github.com/xju2/root_plot_utils#readme"
Issues = "https://github.com/xju2/root_plot_utils/issues"
Source = "https://github.com/xju2/root_plot_utils"


[tool.ruff]
line-length = 100
preview = false
lint.select = ["ALL"]
lint.ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D205", "D401", "D203", "D213", "D107", "D413",
    "S101", "S404", "S602", "S403", "S105", "S301", "PLR2004", "PLR0912", "PLR0913",
    "PLR0914", "PLR0915", "PLR0917", "PLC0415", "PLW1514", "PLR6301", "PLR1702", "PLR0904",
    "F401", "E501", "PD901", "C901", "I001", "COM", "EM", "FIX", "FBT", "G004",
    "N802", "N803", "N806", "N812", "T201", "PTH123", "RUF015", "RUF017", "ERA", "ISC001",
    "RET504", "SLF001", "TD003", "ARG002", "N999", "TRY201", "TRY003", "ANN204", "ANN202",
    "ANN001", "ANN201", "ANN003",
]
extend-exclude = ["*.ipynb"]

[tool.pydocstyle]
convention = "numpy"

[tool.hatch.version]
path = "src/vroot/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/vroot tests}"

[tool.coverage.run]
source_pkgs = ["vroot", "tests"]
branch = true
parallel = true
omit = [
  "src/vroot/__about__.py",
]

[tool.coverage.paths]
vroot = ["src/vroot", "*/vroot/src/vroot"]
tests = ["tests", "*/vroot/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
